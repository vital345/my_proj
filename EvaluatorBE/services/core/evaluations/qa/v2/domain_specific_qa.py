from typing import Dict, List
from services.ai.agents.domain_specific_qa.autogenerated_questions_qa_agent import domain_specific_qa_agent,Question
from sqlalchemy.orm import Session
from db.models.evaluation_step import EvaluationStep
from db.models.user_evaluation import UserEvaluation
from db.models.chat_session import ChatSession
from db.models.chat_history import ChatHistory 
from services.core.evaluations.qa.v2.project_specific_qa import project_specific_qa
from services.ai.agents.domain_specific_qa.predefined_questions_qa_agent import predefined_questions_qa_agent
from db.chat_history import get_chat_history
from db.models.evaluation import Evaluation
from fastapi import BackgroundTasks, UploadFile, Response
from services.ai.speech_processing.speech_to_text import convert_speech_to_text
import json
from services.ai.agents.eleven_labs.text_to_audio import convert_text_to_audio
from fastapi.responses import JSONResponse
import base64

def domain_specific_qa(chat_id:int,query:UploadFile | str ,db:Session, response_queues: Dict[int, List[Dict]], background_tasks: BackgroundTasks):
    
    user_evaluation_id:int = db.query(
        ChatSession).where(
            ChatSession.id == chat_id).first().userevaluation_id
    
    userEvaluation:UserEvaluation = db.query(UserEvaluation).where(
        UserEvaluation.id == user_evaluation_id
        ).first()
    
    chatSession:ChatSession = db.query(
        ChatSession).where(
            ChatSession.id == chat_id).first()
    
    evaluation = db.query(
        Evaluation).where(
            Evaluation.id == userEvaluation.evaluation_id
        ).first()
    
    
    
    if(
        db.query(
            EvaluationStep).where(
                EvaluationStep.step_name == 'domain_specific_qa'
                ).where(
                    EvaluationStep.userevaluation_id == userEvaluation.id
                ).first() != None
        ):
        
        return {
            "question":None,
            "is_complete":True,
            "errors":[
                "evaluation already completed"
            ],
            "viva_type":"Domain specific viva"
        }
    if(not isinstance(query,str)):   
        query = convert_speech_to_text(query)
        
    if(evaluation.questions == None):
        print("track_name: ", evaluation.track_name)
        print("Chat id: ", chat_id)
        print("query: ", query)
        result = domain_specific_qa_agent(evaluation.track_name,chat_id,query)
        print("#######VIPIN1")
        print(result)
        print("#########################")
    else:
        result = predefined_questions_qa_agent(
            session_id=chat_id,
            list_of_questions=evaluation.questions,
            domain_name=evaluation.track_name,
            query=query,
            response_queues=response_queues,
            background_tasks=background_tasks
        )
        
     
        
    if(isinstance(result,Question)):
            try:
                audio_content = convert_text_to_audio(result.question)
                encoded_audio = base64.b64encode(audio_content).decode('utf-8')
            except Exception as e:
                return {
                    "error": str(e),
                    "question":result.question,
                    "previous_answer":query,
                    "chat_history":get_chat_history(session_id=chat_id).messages,
                    "is_complete":False,
                    "errors":[],
                    "viva_type":"Domain specific viva"
                }
            return {
                "audio": encoded_audio,
                "question":result.question,
                "previous_answer":query,
                "chat_history":get_chat_history(session_id=chat_id).messages,
                "is_complete":False,
                "errors":[],
                "viva_type":"Domain specific viva",
            }
    else:   
            print("###############################VIPIN3")
            print(type(result))   
            print(result)   
            chat_history = get_chat_history(chat_id).messages
            chat_history = [message.model_dump() for message in chat_history]
            print("Step: Project specific QA")
            print("Score: ", result.score)
            print("Explanation: ", result.explanation)
            print("questions: ", chat_history)
            db.add(
                EvaluationStep(
                    userevaluation_id = userEvaluation.id, 
                    step_name = 'domain_specific_qa',
                    step_report = {
                        "score" : result.score,
                        "explanation" : result.explanation,
                        "questions": chat_history
                    }
                    )
                )
            db.commit()
            
            chatSession.session_type = "project_specific_qa"
            db.add(chatSession)
            db.commit()
            db.refresh(chatSession)
            
            db.query(ChatHistory).where(ChatHistory.session_id == chatSession.id).delete()            
            db.commit()
            response_queues[chat_id] = []
            return project_specific_qa(chat_id, "", db, response_queues, background_tasks)
        
    
    