from services.ai.agents.domain_specific_qa.autogenerated_questions_qa_agent import domain_specific_qa_agent,Question
from sqlalchemy.orm import Session
from db.models.evaluation_step import EvaluationStep
from db.models.user_evaluation import UserEvaluation
from db.models.chat_session import ChatSession
from db.models.chat_history import ChatHistory 
from services.core.evaluations.qa.v1.project_specific_qa import project_specific_qa
from services.ai.agents.domain_specific_qa.predefined_questions_qa_agent import predefined_questions_qa_agent
from db.chat_history import get_chat_history
from db.models.evaluation import Evaluation
def domain_specific_qa(chat_id:int,query:str,db:Session):
    
    user_evaluation_id:int = db.query(
        ChatSession).where(
            ChatSession.id == chat_id).first().userevaluation_id
    
    userEvaluation:UserEvaluation = db.query(UserEvaluation).where(
        UserEvaluation.id == user_evaluation_id
        ).first()
    
    chatSession:ChatSession = db.query(
        ChatSession).where(
            ChatSession.id == chat_id).first()
    
    evaluation = db.query(
        Evaluation).where(
            Evaluation.id == userEvaluation.evaluation_id
        ).first()
    
    
    
    if(
        db.query(
            EvaluationStep).where(
                EvaluationStep.step_name == 'domain_specific_qa'
                ).where(
                    EvaluationStep.userevaluation_id == userEvaluation.id
                ).first() != None
        ):
        
        return {
            "question":None,
            "is_complete":True,
            "errors":[
                "evaluation already completed"
            ]
        }
        
    if(evaluation.questions == None):
        result = domain_specific_qa_agent(chat_id,query)
    else:
        result = predefined_questions_qa_agent(
            session_id=chat_id,
            list_of_questions=evaluation.questions,
            domain_name=evaluation.track_name,
            query=query
        )
        
    if(isinstance(result,Question)):
            return {
                "question":result.question,
                "is_complete":False,
                "errors":[]
            }
            
    else:
            
            chat_history = get_chat_history(chat_id).messages
            chat_history = [message.model_dump() for message in chat_history]
            db.add(
                EvaluationStep(
                    userevaluation_id = userEvaluation.id, 
                    step_name = 'domain_specific_qa',
                    step_report = {
                        "score" : result.score,
                        "explanation" : result.explanation,
                        "questions": chat_history
                    }
                    )
                )
            db.commit()
            
            chatSession.session_type = "project_specific_qa"
            db.add(chatSession)
            db.commit()
            db.refresh(chatSession)
            
            db.query(ChatHistory).where(ChatHistory.session_id == chatSession.id).delete()            
            db.commit()
            return project_specific_qa(chat_id,"",db)
        
    
    