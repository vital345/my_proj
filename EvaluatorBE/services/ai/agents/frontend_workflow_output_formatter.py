
from typing import List,Literal,Optional
from langgraph.prebuilt import create_react_agent
from langchain.tools import tool
from langchain_openai import ChatOpenAI
from langgraph.checkpoint.memory import MemorySaver
from pydantic import BaseModel
from langchain.prompts import ChatPromptTemplate

class TestCase(BaseModel):
    test_name:str
    test_status: Literal['partial success', 'success','failure']
    total_steps: int
    successful_steps: int
    failed_steps: int
    conclusion: str

# class StepDetails(BaseModel):
#     action: str
#     element: str
#     status: str
#     notes: Optional[str] 

# class ErrorDetails(BaseModel):
#     description: str

class Report(BaseModel):
    total_number_of_testcases:int
    total_number_of_passes_testcases:int
    total_number_of_failed_testcases:int
    list_of_testcases:List[TestCase]
 
 

system_prompt = """
You are a formatting agent responsible for taking the raw output generated by an 
frontend workflow validation agent and organizing it into a structured format. You will receive a 
summary report with details of frontend workflows, and your task is to reformat it 
according to the given format.
{raw_report}
""" 


async def frontend_workflow_output_formatter(raw_report: list):
    llm = ChatOpenAI(
    model="gpt-4o",
    temperature=0,
   )

    llm = llm.with_structured_output(Report)
    prompt = ChatPromptTemplate.from_messages([
           ("system",system_prompt)
    ])
    
    chain = prompt | llm   
    for i in range(3):
        try:
            output = await chain.ainvoke("\n----------\n".join(raw_report))  
            return output 
        except Exception as e:
            print(e)
            continue


   
    