**HU.25.1.2 – Java – Final Assignment** ## **Problem Statement** Create a social network called **SOCIO** which emulates real-life social networks and allows users to connect with each other. --- ## **Functional Requirements** ### **1. User Management** - Users can register using their email ID and password. - Upon registration, users can log in with their credentials. - User profiles can be **public** or **private**. - Users can toggle their profile visibility settings. - Two types of users: - **Regular USER**: Public users who register using their credentials. - **Socio ADMIN**: Moderators appointed by SOCIO (email IDs must end with `@socio.com`). - **Admin Privileges**: - Socio ADMINs have all rights of a regular user plus additional privileges. - Only a Socio ADMIN can add another Socio ADMIN. - Socio ADMINs can bulk import users via `.csv` or `.xlsx` files. ### **2. Post Management** - Users can create posts with text and/or media (images, videos, documents, URLs, etc.). - Posts have metadata including **likes** and **comments**. - Posts can be **reported** if they violate SOCIO policies. - Users can **share** posts, which creates a new post linking to the original post. ### **3. User Interactions** - Users can **follow** other users. - Users can view their own posts and posts from others. - Users can **like** and **comment** on posts. - Users can **report** posts with a justification for moderation. ### **4. Group Management** - Users can create **Groups**. - A user can be part of multiple groups. - Groups can have the same name but must have unique **Group IDs**. - Only the **creator** of a group can add/remove members. - Only **members** can post within a group. - Groups can be **public** or **private** (Admins can see all groups). - Users can view groups they are part of and see group details. ### **5. Scheduled Interactions** - A **daily scheduler (00:00 hrs.)** will create **Happy Birthday** posts for users with birthdays. - Implementation via **Spring Batch and Task Scheduler**: - **Reader**: Reads all users. - **Processor**: Flags users with birthdays. - **Writer**: Creates birthday posts. ### **6. Statistics & Moderation** - **Admins** can view: - Users ordered by **follower count**, grouped by dates. - Posts ordered by **likes and comments**, grouped by dates, users, and file type. - Reported posts grouped by dates, users, and file type. - All reports must be **exportable (.csv, .xlsx)**. - **Admin Moderation**: - Review reported posts and decide to **keep** or **delete** them. - Close reports accordingly. --- ## **Non-Functional Requirements** - **Low latency & high throughput**. - **Cacheable & paginated** large API responses. - **Secure authentication & role-based authorization** (JWT-based, stateless). - **Scalability & maintainability**. - **Exception handling** for meaningful error responses. - **Unit tests** with JUnit coverage. - **Full completion** requires JUnit tests and JavaDocs. --- ## **Project Milestones** ### **Milestone 1: Basic Setup & Security (15%)** - **Spring Boot** project setup. - **ER Diagram & Database** setup. - CRUD operations using **JDBC**. - **Spring Security** for authentication. - Secure APIs. - Implement **Swagger Documentation**. ### **Milestone 2: JPA, Security & User Management (25%)** - Implement **JPA & DAO** classes. - Integrate **JWT-based authentication**. - Implement **logging**. - User Registration API: - Encrypt passwords before storing. - Prevent duplicate registrations. - User Login API: - Validate credentials. - Return JWT token with roles. - Enforce password expiry policy (30 days). - **Password Reset API**. - CRUD APIs for **User Management**. ### **Milestone 3: CRUD for Posts, Users, & Groups (30%)** - **Post Management APIs** (Create, Update, Fetch, Delete). - **User Interactions APIs**: - Follow/unfollow users. - Like, comment, share, and report posts. - **Group Management APIs**: - Create/Delete groups. - Add/Remove users. - CRUD operations for group posts. ### **Milestone 4: Admin Operations & Bulk Import (25%)** - Admin APIs for: - **Adding/Updating Admins**. - **Viewing user statistics** (follower count, engagement). - **Viewing post statistics** (likes, comments, file type). - **Viewing reported posts & group analytics**. - **Moderation**: Admins can act on reported posts. - **Bulk user import** via `.csv` or `.xlsx`. ### **Milestone 5: Performance Optimization & Testing (10%)** - **Pagination** for GET APIs. - **Caching** for non-paginated GET APIs (Admin reports, etc.). - **Cache Eviction Policy** on data updates. - **JavaDocs** for all classes. - **Database query optimization**. - **85% JUnit Coverage**. - **Logging for APIs & Services**. - **Integration Test** for a selected API. --- ## **Milestone Evaluation & Weightage** | **Milestone** | **Weightage** | **Tasks** | **Task Weightage** | |--------------|-------------|----------|------------------| | Milestone 1 | 15% | Spring Boot setup | 3% | | | | ER Diagram & DB setup | 3% | | | | CRUD operations (JDBC) | 4% | | | | Spring Security | 2% | | | | Secure APIs | 2% | | | | Swagger Docs | 1% | | Milestone 2 | 25% | ORM & JPA Implementation | 5% | | | | JWT Authentication | 5% | | | | Logging | 1% | | | | Unauthorized API errors | 1% | | | | User Registration API | 3% | | | | User Login API | 3% | | | | Password Reset API | 3% | | | | User CRUD APIs | 4% | | Milestone 3 | 30% | Post CRUD APIs | 8% | | | | User Interaction APIs | 8% | | | | Group CRUD APIs | 14% | | Milestone 4 | 25% | Admin APIs (Users, Posts, Reports) | 14% | | | | Moderation API | 3% | | | | Bulk User Import API | 5% | | Milestone 5 | 10% | Pagination & Search | 2% | | | | Caching & Eviction | 2% | | | | JavaDocs | 1% | | | | Query Optimization | 1% | | | | JUnit Coverage | 2% | | | | Logging | 1% | | | | Integration Test | 1% | --- This structured document ensures clarity and readability for all stakeholders involved in the project.