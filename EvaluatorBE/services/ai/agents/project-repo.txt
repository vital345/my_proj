This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-27T08:05:12.493Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.gitignore
eslint.config.js
index.html
jest.config.js
jest.setup.ts
mock.ts
package.json
postcss.config.js
public/vite.svg
README.md
setupTests.js
src/App.tsx
src/assets/react.svg
src/components/EventRoutes.tsx
src/components/Header.tsx
src/components/pages/Events/EventAnalysis/BarChart.tsx
src/components/pages/Events/EventAnalysis/EventAnalysisPage.tsx
src/components/pages/Events/EventAnalysis/EventList.tsx
src/components/pages/Events/EventAnalysis/SummaryCard.tsx
src/components/pages/Events/EventDetails/EventCard.tsx
src/components/pages/Events/EventDetails/EventDescriptionCard.tsx
src/components/pages/Events/EventDetails/EventDetailsPage.tsx
src/components/pages/Events/EventDetails/EventImageCard.tsx
src/components/pages/Events/EventDetails/EventNotFound.tsx
src/components/pages/Events/EventDetails/WhenWhereOrganizerCard.tsx
src/components/pages/Events/EventForm/EventFormPage.spec.tsx
src/components/pages/Events/EventForm/EventFormPage.tsx
src/components/pages/Events/EventList/__tests__/EventGridCard.spec.tsx
src/components/pages/Events/EventList/__tests__/EventListCard.spec.tsx
src/components/pages/Events/EventList/EventGridCard.tsx
src/components/pages/Events/EventList/EventListCard.tsx
src/components/pages/Events/EventList/EventNav.tsx
src/components/pages/Events/EventList/EventsListPage.tsx
src/components/pages/GenericErrorPage.tsx
src/components/pages/LoginPage.tsx
src/components/pages/SignUpPage.tsx
src/components/ui/Loader.tsx
src/components/ui/LoadingPage.tsx
src/index.css
src/interfaces/Event.ts
src/main.tsx
src/store/analysis.ts
src/store/auth.ts
src/store/event-registration.ts
src/store/event.ts
src/store/hooks.ts
src/store/index.ts
src/utils/getFormattedDate.ts
src/utils/getFormattedTime.ts
src/utils/isDateInFuture.ts
src/utils/trimString.ts
src/vite-env.d.ts
tailwind.config.js
tsconfig.app.json
tsconfig.json
tsconfig.node.json

================================================================
Repository Files
================================================================

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)

================
File: index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Event Manager</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

================
File: jest.config.js
================
export default {
    testEnvironment: "jsdom",
    transform: {
       '^.+\\.tsx?$': [
    'ts-jest',
    // required due to custom location of tsconfig.json configuration file
    // https://kulshekhar.github.io/ts-jest/docs/getting-started/options/tsconfig
    {tsconfig: './tsconfig.app.json'},
  ],
    },
    setupFilesAfterEnv: [
      "<rootDir>/support/setupTests.js"
   ],
  
    moduleNameMapper: {
      "\\.(css|less|sass|scss)$": "identity-obj-proxy",
      "^.+\\.svg$": "jest-transformer-svg",
      ".+\\.(png|jpg|ttf|woff|woff2)$": "identity-obj-proxy"
    },
  
    setupFilesAfterEnv: ["<rootDir>/jest.setup.ts"],
  };

================
File: jest.setup.ts
================
import "@testing-library/jest-dom";

================
File: mock.ts
================
module.exports = 'test-file-stub';

================
File: package.json
================
{
  "name": "event-manager",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview",
    "test": "jest test",
    "coverage": "jest --coverage"
  },
  "dependencies": {
    "@emotion/react": "^11.13.5",
    "@emotion/styled": "^11.13.5",
    "@mui/icons-material": "^6.1.7",
    "@mui/material": "^6.1.7",
    "@mui/x-charts": "^7.22.2",
    "@reduxjs/toolkit": "^2.3.0",
    "@types/testing-library__jest-dom": "^5.14.9",
    "axios": "^1.7.7",
    "currency-symbol-map": "^5.1.0",
    "html-react-parser": "^5.1.18",
    "html-to-text": "^9.0.5",
    "html2canvas": "^1.4.1",
    "react": "^18.3.1",
    "react-csv": "^2.2.2",
    "react-dom": "^18.3.1",
    "react-quill": "^2.0.0",
    "react-redux": "^9.1.2",
    "react-router-dom": "^6.28.0",
    "react-toastify": "^10.0.6",
    "redux-persist": "^6.0.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.13.0",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.0.1",
    "@testing-library/user-event": "^14.5.2",
    "@types/html-to-text": "^9.0.4",
    "@types/jest": "^29.5.14",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "@vitejs/plugin-react": "^4.3.3",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.13.0",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.14",
    "globals": "^15.11.0",
    "identity-obj-proxy": "^3.0.0",
    "jest": "^29.7.0",
    "jest-environment-jsdom": "^29.7.0",
    "jest-transformer-svg": "^2.0.2",
    "postcss": "^8.4.49",
    "tailwindcss": "^3.4.15",
    "ts-jest": "^29.2.5",
    "ts-node": "^10.9.2",
    "typescript": "~5.6.2",
    "typescript-eslint": "^8.11.0",
    "vite": "^5.4.10"
  }
}

================
File: postcss.config.js
================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: README.md
================
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type aware lint rules:

- Configure the top-level `parserOptions` property like this:

```js
export default tseslint.config({
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

- Replace `tseslint.configs.recommended` to `tseslint.configs.recommendedTypeChecked` or `tseslint.configs.strictTypeChecked`
- Optionally add `...tseslint.configs.stylisticTypeChecked`
- Install [eslint-plugin-react](https://github.com/jsx-eslint/eslint-plugin-react) and update the config:

```js
// eslint.config.js
import react from 'eslint-plugin-react'

export default tseslint.config({
  // Set the react version
  settings: { react: { version: '18.3' } },
  plugins: {
    // Add the react plugin
    react,
  },
  rules: {
    // other rules...
    // Enable its recommended rules
    ...react.configs.recommended.rules,
    ...react.configs['jsx-runtime'].rules,
  },
})
```

================
File: setupTests.js
================
import '@testing-library/jest-dom'

================
File: src/App.tsx
================
import { Route, Routes } from "react-router-dom";
import "./App.css";
import LoginPage from "./components/pages/LoginPage";
import SignUpPage from "./components/pages/SignUpPage";
import Header from "./components/Header";
import EventRoutes from "./components/EventRoutes";
import GenericErrorPage from "./components/pages/GenericErrorPage";

function App() {


  return (
    <>
      <Header />
      <Routes>
        <Route />
        <Route path="/login" element={<LoginPage />} />
        <Route path="/signup" element={<SignUpPage />} />
        <Route path="/error-page" element={<GenericErrorPage title={null} description={null} />} />
        <Route path="/*" element={<EventRoutes />} />
      </Routes>
    </>
  );
}

export default App;

================
File: src/assets/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: src/components/EventRoutes.tsx
================
import { Navigate, Route, Routes } from "react-router-dom";
import EventsListPage from "./pages/Events/EventList/EventsListPage";
import EventDetailsPage from "./pages/Events/EventDetails/EventDetailsPage";
import EventFormPage from "./pages/Events/EventForm/EventFormPage";
import EventAnalysisPage from "./pages/Events/EventAnalysis/EventAnalysisPage";
import { useAppSelector } from "../store/hooks";

export default function () {

  const isLoggedIn = useAppSelector(state => state.auth.status === 'success')

  return (
    <>
    {isLoggedIn ? 
      <Routes>
        <Route />
        <Route path="" element={<Navigate to="/event-list" />} />
        <Route path="/event-list" element={<EventsListPage />} />
        <Route path="/event-details/:id" element={<EventDetailsPage />} />
        <Route path="/create-event" element={<EventFormPage />} />
        <Route path="/event-analysis" element={<EventAnalysisPage />} />
      </Routes>: <Navigate to={"/login"}/>}
    </>
  );
}

================
File: src/components/Header.tsx
================
import { Link, NavLink, useLocation } from "react-router-dom";
import ControlPointIcon from "@mui/icons-material/ControlPoint";
export default function () {
  const location = useLocation();

  return (
    <>
      <header className="px-11 py-3 flex flex-col space-y-6 md:flex-row md:space-y-0 justify-between items-center shadow">
        <h1 className="text-3xl font-semibold text-slate-700">
          <span className="text-slate-500">Event</span> Manager
        </h1>

        {!(location.pathname == "/login" || location.pathname == "/signup") && (
          <div className="flex sm:space-x-16 items-center flex-col space-y-6 sm:flex-row sm:space-y-0">
            <div className="space-x-6 text-gray-700 font-bold">
              <NavLink
                className={({ isActive }) =>
                  isActive ? "border-b-2 border-gray-700" : "inactive"
                }
                to={"/event-list"}
              >
                DASHBOARD
              </NavLink>
              <NavLink
                className={({ isActive }) =>
                  isActive ? "border-b-2 border-gray-700" : "inactive"
                }
                to={"/event-analysis"}
              >
                ANALYSIS
              </NavLink>
            </div>
            <Link
              className="px-4 py-2 bg-slate-500 text-white rounded-md shadow flex items-center space-x-2 hover:bg-slate-800 duration-300"
              to={"/create-event"}
            >
              <ControlPointIcon />
              <span>Add Event</span>
            </Link>
          </div>
        )}
      </header>
    </>
  );
}

================
File: src/components/pages/Events/EventAnalysis/BarChart.tsx
================
import { BarChart } from "@mui/x-charts";
import { useAppDispatch, useAppSelector } from "../../../../store/hooks";
import { useEffect, useRef, useState } from "react";
import { fetchEventAnalysis } from "../../../../store/analysis";
import GetAppIcon from "@mui/icons-material/GetApp";
import html2canvas from 'html2canvas';
import { toast } from "react-toastify";


export default function () {
  const analysisData = useAppSelector((state) => state.eventAnalysis);
  const analysisStatus = useAppSelector((state) => state.eventAnalysis.status);
  const dispatch = useAppDispatch();

  useEffect(() => {
    if (analysisStatus == "pending") dispatch(fetchEventAnalysis());
  }, [analysisStatus]);

  const chartRef = useRef<HTMLDivElement>(null);

  const [width,setWidth] = useState(700)

  window.addEventListener('resize',() => {
    if(document.body.clientWidth < 700) {
      setWidth(document.body.clientWidth - 20)
    }
    else setWidth(700)
  })


  const handleExport = () => {
    if(chartRef.current == null){
       toast.error("Something went wrong !")
       return;  
    }
    html2canvas(chartRef.current).then((canvas) => {
      const link = document.createElement('a');
      link.download = 'chart.png';
      link.href = canvas.toDataURL('image/png');
      link.click();
    });
  };

  return (
    <>
      <div className="flex justify-center">
        {analysisData.barChart && (
          <div  className="border p-4 rounded my-10">
            <div className="flex justify-end">
            <button
            onClick={handleExport}
            className=" border rounded px-2 py-1 ml-3 space-x-2 text-gray-600 hover:bg-slate-100 duration-200">
              <span>Export</span>
              <GetAppIcon />
            </button>
            </div>
            <div ref={chartRef}>
            <BarChart
              xAxis={[
                {
                  scaleType: "band",
                  data: Object.keys(analysisData.barChart),
                },
              ]}
              series={[{ data: Object.values(analysisData.barChart) }]}
              width={width}
              height={300}
              // loading={true}
            />
            </div>
          </div>
        )}
      </div>
    </>
  );
}

================
File: src/components/pages/Events/EventAnalysis/EventAnalysisPage.tsx
================
import SummaryCard from "./SummaryCard";
import BarChart from "./BarChart";
import EventList from "./EventList";
import { useAppDispatch, useAppSelector } from "../../../../store/hooks";
import { useEffect } from "react";
import { fetchEventAnalysis } from "../../../../store/analysis";
import { fetchEvents } from "../../../../store/event";
import Loader from "../../../ui/Loader";

export default function () {

  
    const analysisStatus = useAppSelector(state => state.eventAnalysis.status)
    const eventFetchStatus = useAppSelector(state => state.event.status)

    const dispatch = useAppDispatch()

    useEffect(()=>{

        if(analysisStatus == 'pending')
            dispatch(fetchEventAnalysis())
    },[analysisStatus])

    useEffect(()=>{

      if(eventFetchStatus == 'pending')
          dispatch(fetchEvents())
  },[eventFetchStatus])

  
  return (

    <div className="lg:mt-6 max-w-6xl mx-auto border shadow rounded p-6">
      {analysisStatus == 'success' &&
      <>
      <SummaryCard />
      <BarChart />
      </>}
      {eventFetchStatus == 'success' &&
      <EventList />}
      {(eventFetchStatus == 'loading' && analysisStatus == 'loading') && 
      <div className="mx-20 flex items-center justify-center text-slate-600">
        <Loader className="!text-6xl" />
      </div>
      }
    </div>
  );
}

================
File: src/components/pages/Events/EventAnalysis/EventList.tsx
================
import SearchIcon from "@mui/icons-material/Search";
import ArrowDownwardIcon from "@mui/icons-material/ArrowDownward";
import { CSVLink } from "react-csv";
import GetAppIcon from "@mui/icons-material/GetApp";
import getFormattedDate from "../../../../utils/getFormattedDate";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TablePagination,
  TableRow,
} from "@mui/material";
import { useNavigate } from "react-router-dom";
import { useAppDispatch, useAppSelector } from "../../../../store/hooks";
import { useEffect, useState } from "react";
import { fetchEvents } from "../../../../store/event";
import { Event } from "../../../../interfaces/Event";
import isDateInFuture from "../../../../utils/isDateInFuture";
import { convert } from "html-to-text";

export default function () {
  const dispatch = useAppDispatch();
  const navigate = useNavigate();
  const [searchTest, setSearchText] = useState("");
  const [eventTypeFilter, setEventTypeFilter] = useState<
    "conference" | "festival" | "playground" | ""
  >("");

  const [filteredRows, setFilteredRows] = useState<Event[]>([]);
  const eventFetchStatus = useAppSelector((state) => state.event.status);
  const [rowsPerPage, setRowsPerPage] = useState(5);
  const [page, setPage] = useState(0);

  const handleChangePage = (_event: unknown, newPage: number) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (
    event: React.ChangeEvent<HTMLInputElement>
  ) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };

  useEffect(() => {
    if (eventFetchStatus == "pending") dispatch(fetchEvents());
  }, []);

  const rows = useAppSelector((state) => state.event.events);

  useEffect(() => {
    setFilteredRows(
      rows
        .map((event) => {
          const plainTextDescription = convert(event.eventDescription)
          return {
            ...event,
            title:
              event.title.length > 20
                ? event.title.substring(0, 20) + " ..."
                : event.title,
            eventDescription:
            plainTextDescription.length > 10
                ? plainTextDescription.substring(0, 10) + " ..."
                : plainTextDescription,
            place:
              event.place.length > 10
                ? event.place.substring(0, 10) + " ..."
                : event.place,
            organizer:
              event.organizer.length > 10
                ? event.organizer.substring(0, 10) + " ..."
                : event.organizer,
          };
        })
        .filter((event) => {
          return (
            event.title
              .toLocaleLowerCase()
              .includes(searchTest.trim().toLocaleLowerCase()) ||
            event.eventDescription
              .toLocaleLowerCase()
              .includes(searchTest.trim().toLocaleLowerCase()) ||
            event.place
              .toLocaleLowerCase()
              .includes(searchTest.trim().toLocaleLowerCase()) ||
            event.type
              .toLocaleLowerCase()
              .includes(searchTest.trim().toLocaleLowerCase())
          );
        })
        .filter((event) => {
          if (eventTypeFilter == "") return true;
          return event.type == eventTypeFilter;
        })
    );

    // setTotalRows(rows.length)
  }, [searchTest, eventTypeFilter, rows, page, rowsPerPage]);

  return (
    <div   className="shadow max-w-6xl overflow-x-auto">
      <div className=" bg-white p-4 flex min-w-[675px]">
        <h2 className="text-gray-700 text-2xl font-medium">Event List</h2>
        <div className="flex-grow"></div>
        <div className="relative">
          <input
            type="text"
            placeholder="Search events..."
            value={searchTest}
            onChange={(e) => setSearchText(e.target.value)}
            className="border rounded px-2 py-1"
          />
          <SearchIcon className="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-500" />
        </div>

        <div className="ml-4">
          <div className="border rounded px-2 py-1 hover:bg-slate-100 duration-200">
            <select
              className="focus:outline-none px-2 bg-inherit"
              value={eventTypeFilter}
              onChange={(e) => setEventTypeFilter(e.target.value as ("" | "conference" | "festival" | "playground"))}
            >
              <option value="">All</option>
              <option value="festival">Festival</option>
              <option value="conference">Conference</option>
              <option value="playground">Playground</option>
            </select>
            <ArrowDownwardIcon />
          </div>
        </div>
        <CSVLink
          className="border rounded px-2 py-1 ml-3 space-x-2 text-gray-600 hover:bg-slate-100 duration-200"
          data={filteredRows}
        >
          <span>Export</span>
          <GetAppIcon />
        </CSVLink>
      </div>
      <Table className="min-w-[1085px]">
        <TableHead>
          <TableRow>
            <TableCell>Id</TableCell>
            <TableCell>Name</TableCell>
            <TableCell>Description</TableCell>
            <TableCell>Date</TableCell>
            <TableCell>Location</TableCell>
            <TableCell>Organizer</TableCell>
            <TableCell>Type</TableCell>
            <TableCell>Status</TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          {filteredRows
            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)
            .map((row: any) => (
              <TableRow
                key={row.id}
                className="hover:bg-slate-100 duration-200 cursor-pointer"
                onClick={() => navigate("/event-details/" + row.id)}
              >
                <TableCell>{row.id}</TableCell>
                <TableCell>{row.title}</TableCell>
                <TableCell>{row.eventDescription}</TableCell>
                <TableCell>{getFormattedDate(row.timing)}</TableCell>
                <TableCell>{row.place}</TableCell>
                <TableCell>{row.organizer}</TableCell>
                <TableCell>{row.type}</TableCell>
                <TableCell>
                  {isDateInFuture(row.timing) ? "incomplete" : "completed"}
                </TableCell>
              </TableRow>
            ))}
        </TableBody>
      </Table>
      <TablePagination
        rowsPerPageOptions={[5, 10, 25]}
        component="div"
        count={filteredRows.length}
        rowsPerPage={rowsPerPage}
        page={page}
        onPageChange={handleChangePage}
        onRowsPerPageChange={handleChangeRowsPerPage}
      />
    </div>
  );
}

================
File: src/components/pages/Events/EventAnalysis/SummaryCard.tsx
================
import { useEffect } from "react"
import { useAppDispatch, useAppSelector } from "../../../../store/hooks"
import { fetchEventAnalysis } from "../../../../store/analysis"

export default function(){
  const analysisData = useAppSelector(state => state.eventAnalysis)
    const analysisStatus = useAppSelector(state => state.eventAnalysis.status)
    const dispatch = useAppDispatch()

    useEffect(()=>{

        if(analysisStatus == 'pending')
            dispatch(fetchEventAnalysis())

    },[analysisStatus])


    return (
        <div className="flex justify-around text-center">
        <div>
          <h3 className="text-sm text-slate-500">Upcoming</h3>
          <p className="text-slate-600 font-medium text-xl">{analysisData.summary?.upcoming}</p>
        </div>
        <div>
          <h3 className="text-sm text-slate-500">Total</h3>
          <p className="text-slate-600 font-medium text-xl">{analysisData.summary?.total}</p>
        </div>
        <div>
          <h3 className="text-sm text-slate-500">Completed</h3>
          <p className="text-slate-600 font-medium text-xl">{analysisData.summary?.completed}</p>
        </div>
        <div>
          <h3 className="text-sm text-slate-500">My Events</h3>
          <p className="text-slate-600 font-medium text-xl">{analysisData.summary?.myEvents}</p>
        </div>
      </div>
    )
}

================
File: src/components/pages/Events/EventDetails/EventCard.tsx
================
import { Link } from "react-router-dom";
import { Event } from "../../../../interfaces/Event";
import EventIcon from "@mui/icons-material/Event";
import LocationOnIcon from "@mui/icons-material/LocationOn";
import { convert } from "html-to-text";
import trimString from "../../../../utils/trimString";
export default function ({ event }: { event: Event }) {

  const plainTextEventDescription = convert(event.eventDescription);

  return (
    // <div className="">
      <div className="flex bg-white shadow rounded-lg flex-col min-w-60">
          <img
            className="object-cover w-full h-40 rounded-tl-lg rounded-tr-lg"
            src={event.imageUrl}
            alt="Event Image"
          />
        <div className="flex-1 p-4 flex flex-col">
          <h2 className="text-xl font-bold text-slate-700">{trimString(event.title,25)}</h2>
          <div className="flex space-x-1 items-center mt-3">
            <EventIcon className="text-slate-500" />
            <p className="text-slate-500 text-sm">
              {" "}
              {event.timing} 
            </p>
          </div>
          <div className="flex space-x-1 items-center mt-1">
            <LocationOnIcon className="text-slate-500" />
            <p className="text-slate-500 text-sm">
              {" "}
              {event.place} 
            </p>
          </div>
          <p className="text-slate-600 font-semibold mt-3">
            Tickets from $
            {event.ticketPrice}
          </p>
          <p className="text-slate-600 text-sm mt-3">
            {trimString(plainTextEventDescription,50)}
          </p>
          <div className="flex-1"></div>
          <Link onClick={() => {
            document.body.scrollTop = document.documentElement.scrollTop = 0;
          }} to={`/event-details/${event.id}`} className="mt-4 px-4 py-2 border border-slate-400 text-slate-600 rounded hover:text-white hover:bg-slate-500 duration-200 text-center">
            TICKETS & DETAILS
          </Link>
        </div>
      </div>
    // </div>
  );
}

================
File: src/components/pages/Events/EventDetails/EventDescriptionCard.tsx
================
import { toast } from "react-toastify";
import { Event } from "../../../../interfaces/Event";
import {
  EventRegistrationStatus,
  registerForEvent,
} from "../../../../store/event-registration";
import { useAppDispatch } from "../../../../store/hooks";
import Loader from "../../../ui/Loader";
import parse from 'html-react-parser'

type eventDescriptionCardInput = {
  event: Event;
  isEventRegistered: boolean;
  eventRegistrationStatus: EventRegistrationStatus;
};
export default function ({
  event,
  isEventRegistered,
  eventRegistrationStatus,
}: eventDescriptionCardInput) {
  const dispatch = useAppDispatch();

  const register = () => {
    dispatch(registerForEvent(String(event.id)));
    toast.success("Successfully registered!!")
  };

  return (
    <div className="mt-6 bg-white p-6 rounded shadow">
      <h2 className="text-2xl font-bold mb-2 text-slate-800">{event.title}</h2>
      <p className="text-slate-600 mb-4">{parse(event.eventDescription)}</p>
      <div className="flex space-x-4">
        <button
          className="mt-4 px-4 py-2 border border-slate-400 text-slate-600 rounded hover:text-white hover:bg-slate-800 duration-200 disabled:cursor-not-allowed disabled:hover:bg-white disabled:hover:text-slate-600"
          disabled={isEventRegistered || eventRegistrationStatus == "loading"}
          onClick={register}
        >
          {eventRegistrationStatus == "loading" ? (
            <div className="px-5">
              <Loader />
            </div>
          ) : isEventRegistered ? (
            "REGISTERED"
          ) : (
            "REGISTER"
          )}
        </button>
        <button
          className="mt-4 px-4 py-2 border rounded text-white bg-slate-500 duration-200 hover:bg-slate-800"
          onClick={() =>
            window.open("https://youtu.be/fgipiO8BbD4?si=1JiSk6yEF7v5jj45")
          }
        >
          WATCH VIDEO
        </button>
      </div>
    </div>
  );
}

================
File: src/components/pages/Events/EventDetails/EventDetailsPage.tsx
================
import { useAppDispatch, useAppSelector } from "../../../../store/hooks";
import { useEffect, useState } from "react";
import { fetchEvents } from "../../../../store/event";
import EventDescriptionCard from "./EventDescriptionCard";
import WhenWhereOrganizerCard from "./WhenWhereOrganizerCard";
import EventImageCard from "./EventImageCard";
import { Navigate, useParams } from "react-router-dom";
import { fetchEventRegistrations } from "../../../../store/event-registration";
import EventCard from "./EventCard";
import EventNotFound from "./EventNotFound";
import axios from "axios";
import { Event } from "../../../../interfaces/Event";
import LoadingPage from "../../../ui/LoadingPage";

export default function () {
  const { id } = useParams();
  const [event, setEvent] = useState<Event | null>(null);
  const [status, setStatus] = useState<
    "pending" | "loading" | "success" | "failure" | "not_found"
  >("pending");

  const eventFetchStatus = useAppSelector((state) => state.event.status);
  const eventRegistrationFetchStatus = useAppSelector(
    (state) => state.eventRegistrations.status
  );
  useEffect(() => {
    setStatus("loading");
    axios
      .get("http://localhost:5000/events/" + id)
      .then((res) => {
        setEvent(res.data);
        setStatus("success");
      })
      .catch((err) => {
        if (err?.response?.status == 404) setStatus("not_found");
        else setStatus("failure");
      });
  }, []);

  const dispatch = useAppDispatch();
  useEffect(() => {
    if (eventFetchStatus != "success" && eventFetchStatus != "loading")
      dispatch(fetchEvents());
    if (
      eventRegistrationFetchStatus != "success" &&
      eventRegistrationFetchStatus != "loading"
    )
      dispatch(fetchEventRegistrations());
  }, []);

  const allEvents = useAppSelector((state) => state.event.events);

  const isEventRegistered = useAppSelector((state) =>
    state.eventRegistrations.eventIds.includes(id as string)
  );
  const eventRegistrationStatus = useAppSelector(
    (state) => state.eventRegistrations.status
  );

  return (
    <>
      {status == "success" && event && (
        <div className="max-w-6xl mx-auto p-6 flex lg:flex-row flex-col lg:space-x-5 space-x-0">
          <div className="lg:w-3/4">
            <EventImageCard />
            <EventDescriptionCard
              event={event}
              isEventRegistered={isEventRegistered}
              eventRegistrationStatus={eventRegistrationStatus}
            />
            <div className="mt-6 p-6 rounded shadow space-y-6">
              <h2 className="text-2xl font-bold mb-2 text-slate-800">
                YOU MAY LIKE
              </h2>
              <div className="flex overflow-x-scroll space-x-6 no-scrollbar pb-3">
                {allEvents.map((event) => (
                  <EventCard key={event.id} event={event} />
                ))}
              </div>
            </div>
          </div>
          <div className="lg:w-1/4 space-y-6">
            <div className="rounded border shadow">
              <iframe
                className="h-72 w-full"
                src={`http://maps.google.com/maps?q=${event.latitude},${event.longitude}&z=16&output=embed`}
              ></iframe>
            </div>
            <WhenWhereOrganizerCard event={event} />
          </div>
        </div>
      )}

      {status == "loading" && <LoadingPage />}
      {status == "failure" && <Navigate to={"/error-page"} />}
      {status == "not_found" && <EventNotFound />}
    </>
  );
}

================
File: src/components/pages/Events/EventDetails/EventImageCard.tsx
================
import eventImg from "../../../../assets/event.png";

export default function () {
  return (
    <div className="bg-white rounded shadow-lg overflow-hidden">
      <img
        src={eventImg}
        alt="Event Image"
        className="w-full h-64 object-cover"
      />
    </div>
  );
}

================
File: src/components/pages/Events/EventDetails/EventNotFound.tsx
================
export default function(){

    return (
        <div className="text-center mt-20">
            <h1 className="text-8xl  text-slate-800">404</h1>
            <p className="text-2xl  text-slate-600">Event not found</p>
        </div>
    )

}

================
File: src/components/pages/Events/EventDetails/WhenWhereOrganizerCard.tsx
================
import { Event } from "../../../../interfaces/Event";
import AddCircleOutlineIcon from "@mui/icons-material/AddCircleOutline";
import LocationOnIcon from "@mui/icons-material/LocationOn";
import CalendarMonthIcon from "@mui/icons-material/CalendarMonth";
import AccessTimeIcon from "@mui/icons-material/AccessTime";
import getFormattedDate from "../../../../utils/getFormattedDate";
import getFormattedTime from "../../../../utils/getFormattedTime";
import RemoveCircleOutlineIcon from '@mui/icons-material/RemoveCircleOutline';
import { useState } from "react";

export default function ({ event }: { event: Event }) {
  const [isTImingAndPlaceVisible, setIsTImingAndPlaceVisible] =
    useState<boolean>(false);
  const [isOrganizerVisible, setIsOrganizerVisible] = useState<boolean>(false);

  return (
    <div className="shadow border border-slate-300 rounded">
      <div
      onClick={() => setIsTImingAndPlaceVisible((s) => !s)}
      className="flex justify-between items-center border-b border-slate-300 py-3 px-4 cursor-pointer hover:bg-slate-100 duration-300">
        <h3 className="text-xl font-bold text-slate-800">When & Where</h3>   
        {isTImingAndPlaceVisible ? <RemoveCircleOutlineIcon/> : <AddCircleOutlineIcon />} 
      </div>
      {isTImingAndPlaceVisible && (
        <div className="mb-2 text-slate-600 py-3 px-4 text-sm space-y-2">
          <div className="flex space-x-1 items-center">
            <LocationOnIcon />
            <p>{event.place}</p>
          </div>
          <div className="space-x-1 flex items-center">
            <CalendarMonthIcon />
            <p>{getFormattedDate(event.timing)}</p>
          </div>
          <div className="flex items-center space-x-1">
            <AccessTimeIcon />
            <p>From {getFormattedTime(event.timing)}</p>
          </div>
        </div>
      )}

      <div 
      onClick={() => setIsOrganizerVisible(s => !s)}
      className="flex justify-between items-center border-y border-slate-300 py-3 px-4 cursor-pointer hover:bg-slate-100 duration-300">
        <h3 className="text-xl font-bold text-slate-800">Organizer</h3>
        {isOrganizerVisible ? <RemoveCircleOutlineIcon/> : <AddCircleOutlineIcon />} 
      </div>
      {isOrganizerVisible && (
        <div className="mb-2 text-slate-600 py-3 px-4 text-sm space-y-2">
          <p>{event.organizer}</p>
        </div>
      )}
    </div>
  );
}

================
File: src/components/pages/Events/EventForm/EventFormPage.spec.tsx
================
import { render, screen, fireEvent } from "@testing-library/react";
import { useAppDispatch, useAppSelector } from "../../../../store/hooks";
import { addEvent } from "../../../../store/event";
import { toast } from "react-toastify";
import { useNavigate } from "react-router-dom";
import EventFormPage from "./EventFormPage";

jest.mock("../../../../store/hooks");
jest.mock("../../../../store/event");
jest.mock("react-toastify");
jest.mock("react-router-dom", () => ({
  useNavigate: jest.fn(),
}));

const mockDispatch = jest.fn();
const mockNavigate = jest.fn();

(useAppDispatch as any).mockReturnValue(mockDispatch);
(useNavigate as any).mockReturnValue(mockNavigate);

describe("EventFormPage", () => {
  beforeEach(() => {
    (useAppSelector as any).mockImplementation((selector: any) =>
      selector({
        event: { addEventStatus: "idle" },
      })
    );
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  test("renders with initial state", () => {
    render(<EventFormPage />);

    expect(screen.getByLabelText("Event Name")).toBeInTheDocument();
    expect(screen.getByLabelText("Event Type")).toBeInTheDocument();
    expect(screen.getByLabelText("Tagline")).toBeInTheDocument();
    expect(screen.getByLabelText("Email")).toBeInTheDocument();
    expect(screen.getByLabelText("Phone Number")).toBeInTheDocument();
    expect(screen.getByLabelText("Start Date & Time")).toBeInTheDocument();
    expect(screen.getByLabelText("Organizer")).toBeInTheDocument();
    expect(
      screen.getByLabelText("Organizer Details (Optional)")
    ).toBeInTheDocument();
    expect(screen.getByLabelText("Speaker")).toBeInTheDocument();
    expect(screen.getByLabelText("Video URL (Optional)")).toBeInTheDocument();
    expect(screen.getByLabelText("Image Url")).toBeInTheDocument();
    expect(screen.getByLabelText("Ticket Price")).toBeInTheDocument();
    expect(screen.getByLabelText("Address Line 1")).toBeInTheDocument();
    expect(screen.getByLabelText("Address2 (Optional)")).toBeInTheDocument();
    expect(screen.getByLabelText("City")).toBeInTheDocument();
    expect(screen.getByLabelText("State")).toBeInTheDocument();
    expect(screen.getByLabelText("Zip Code")).toBeInTheDocument();
    expect(screen.getByLabelText("Country")).toBeInTheDocument();
    expect(screen.getByLabelText("Latitude")).toBeInTheDocument();
    expect(screen.getByLabelText("Longitude")).toBeInTheDocument();
  });

  test("form fields update correctly", () => {
    render(<EventFormPage />);

    fireEvent.change(screen.getByLabelText("Event Name"), {
      target: { value: "Sample Event" },
    });
    expect(screen.getByLabelText("Event Name")).toHaveValue("Sample Event");

    fireEvent.change(screen.getByLabelText("Event Type"), {
      target: { value: "festival" },
    });
    expect(screen.getByLabelText("Event Type")).toHaveValue("festival");

    fireEvent.change(screen.getByLabelText("Tagline"), {
      target: { value: "Sample Tagline" },
    });
    expect(screen.getByLabelText("Tagline")).toHaveValue("Sample Tagline");

    fireEvent.change(screen.getByLabelText("Email"), {
      target: { value: "sample@example.com" },
    });
    expect(screen.getByLabelText("Email")).toHaveValue("sample@example.com");

    fireEvent.change(screen.getByLabelText("Phone Number"), {
      target: { value: "1234567890" },
    });
    expect(screen.getByLabelText("Phone Number")).toHaveValue("1234567890");

    fireEvent.change(screen.getByLabelText("Start Date & Time"), {
      target: { value: "2023-10-10T10:00" },
    });
    expect(screen.getByLabelText("Start Date & Time")).toHaveValue(
      "2023-10-10T10:00"
    );

    fireEvent.change(screen.getByLabelText("Organizer"), {
      target: { value: "Sample Organizer" },
    });
    expect(screen.getByLabelText("Organizer")).toHaveValue("Sample Organizer");

    fireEvent.change(screen.getByLabelText("Organizer Details (Optional)"), {
      target: { value: "Sample Details" },
    });
    expect(screen.getByLabelText("Organizer Details (Optional)")).toHaveValue(
      "Sample Details"
    );

    fireEvent.change(screen.getByLabelText("Speaker"), {
      target: { value: "Sample Speaker" },
    });
    expect(screen.getByLabelText("Speaker")).toHaveValue("Sample Speaker");

    fireEvent.change(screen.getByLabelText("Video URL (Optional)"), {
      target: { value: "https://example.com" },
    });
    expect(screen.getByLabelText("Video URL (Optional)")).toHaveValue(
      "https://example.com"
    );

    fireEvent.change(screen.getByLabelText("Image Url"), {
      target: { value: "path/to/image" },
    });
    expect(screen.getByLabelText("Image Url")).toHaveValue(
      "path/to/image"
    );

    fireEvent.change(screen.getByLabelText("Ticket Price"), {
      target: { value: "50" },
    });
    expect(screen.getByLabelText("Ticket Price")).toHaveValue(50);

    fireEvent.change(screen.getByLabelText("Address Line 1"), {
      target: { value: "123 Main St" },
    });
    expect(screen.getByLabelText("Address Line 1")).toHaveValue("123 Main St");

    fireEvent.change(screen.getByLabelText("Address2 (Optional)"), {
      target: { value: "Apt 4B" },
    });
    expect(screen.getByLabelText("Address2 (Optional)")).toHaveValue("Apt 4B");

    fireEvent.change(screen.getByLabelText("City"), {
      target: { value: "Sample City" },
    });
    expect(screen.getByLabelText("City")).toHaveValue("Sample City");

    fireEvent.change(screen.getByLabelText("State"), {
      target: { value: "Sample State" },
    });
    expect(screen.getByLabelText("State")).toHaveValue("Sample State");

    fireEvent.change(screen.getByLabelText("Zip Code"), {
      target: { value: "12345" },
    });
    expect(screen.getByLabelText("Zip Code")).toHaveValue("12345");

    fireEvent.change(screen.getByLabelText("Country"), {
      target: { value: "Sample Country" },
    });
    expect(screen.getByLabelText("Country")).toHaveValue("Sample Country");

    fireEvent.change(screen.getByLabelText("Latitude"), {
      target: { value: "12.3456" },
    });
    expect(screen.getByLabelText("Latitude")).toHaveValue("12.3456");

    fireEvent.change(screen.getByLabelText("Longitude"), {
      target: { value: "65.4321" },
    });
    expect(screen.getByLabelText("Longitude")).toHaveValue("65.4321");
  });

  test("form submission dispatches the correct action", () => {
    render(<EventFormPage />);

    fireEvent.change(screen.getByLabelText("Event Name"), {
      target: { value: "Sample Event" },
    });
    fireEvent.change(screen.getByLabelText("Event Type"), {
      target: { value: "festival" },
    });
    fireEvent.change(screen.getByLabelText("Tagline"), {
      target: { value: "Sample Tagline" },
    });
    fireEvent.change(screen.getByLabelText("Email"), {
      target: { value: "sample@example.com" },
    });
    fireEvent.change(screen.getByLabelText("Phone Number"), {
      target: { value: "1234567890" },
    });
    fireEvent.change(screen.getByLabelText("Start Date & Time"), {
      target: { value: "2023-10-10T10:00" },
    });
    fireEvent.change(screen.getByLabelText("Organizer"), {
      target: { value: "Sample Organizer" },
    });
    fireEvent.change(screen.getByLabelText("Organizer Details (Optional)"), {
      target: { value: "Sample Details" },
    });
    fireEvent.change(screen.getByLabelText("Speaker"), {
      target: { value: "Sample Speaker" },
    });
    fireEvent.change(screen.getByLabelText("Video URL (Optional)"), {
      target: { value: "https://example.com" },
    });
    fireEvent.change(screen.getByLabelText("Image Url"), {
      target: { value: "path/to/image" },
    });
    fireEvent.change(screen.getByLabelText("Ticket Price"), {
      target: { value: "50" },
    });
    fireEvent.change(screen.getByLabelText("Address Line 1"), {
      target: { value: "123 Main St" },
    });
    fireEvent.change(screen.getByLabelText("Address2 (Optional)"), {
      target: { value: "Apt 4B" },
    });
    fireEvent.change(screen.getByLabelText("City"), {
      target: { value: "Sample City" },
    });
    fireEvent.change(screen.getByLabelText("State"), {
      target: { value: "Sample State" },
    });
    fireEvent.change(screen.getByLabelText("Zip Code"), {
      target: { value: "12345" },
    });
    fireEvent.change(screen.getByLabelText("Country"), {
      target: { value: "Sample Country" },
    });
    fireEvent.change(screen.getByLabelText("Latitude"), {
      target: { value: "12.3456" },
    });
    fireEvent.change(screen.getByLabelText("Longitude"), {
      target: { value: "65.4321" },
    });
    // fireEvent.change(screen.getByLabelText("Description"), {
    //   target: { value: "Sample Description" },
    // });

    fireEvent.submit(screen.getByRole("button", { name: /create event/i }));

    expect(mockDispatch).toHaveBeenCalledWith(
      addEvent({
        imageUrl: "path/to/image",
        title: "Sample Event",
        phoneNumber: "1234567890",
        email: "sample@example.com",
        eventDescription: "",
        latitude: "12.3456",
        longitude: "65.4321",
        organizer: "Sample Organizer",
        organizerDetails: "Sample Details",
        place:
          "123 Main St Apt 4B Sample City Sample State 12345 Sample Country",
        speaker: "Sample Speaker",
        tagLine: "Sample Tagline",
        ticketCurrencySymbol: "USD",
        ticketPrice: 50,
        timing: "2023-10-10T10:00",
        type: "festival",
        videoUrl: "https://example.com",
        id: expect.any(Number),
      })
    );
  });

  test("displays success toast and navigates on success", () => {
    (useAppSelector as any).mockImplementation((selector:any) =>
      selector({
        event: { addEventStatus: "success" },
      })
    );

    render(<EventFormPage />);

    expect(toast.success).toHaveBeenCalledWith("Event added successfully!!");
    expect(mockNavigate).toHaveBeenCalledWith("/event-list");
  });

  test("displays error toast on failure", () => {
    (useAppSelector as any).mockImplementation((selector:any) =>
      selector({
        event: { addEventStatus: "failure" },
      })
    );

    render(<EventFormPage />);

    expect(toast.error).toHaveBeenCalledWith(
      "Unable to create event. Please try after sometime"
    );
  });
});

================
File: src/components/pages/Events/EventForm/EventFormPage.tsx
================
import { useEffect, useState } from "react";
import { useAppDispatch, useAppSelector } from "../../../../store/hooks";
import { addEvent } from "../../../../store/event";
import { toast } from "react-toastify";
import Loader from "../../../ui/Loader";
import { useNavigate } from "react-router-dom";
import "react-quill/dist/quill.snow.css";
import ReactQuill from "react-quill";

export default function () {
  const [imageUrl, setImageUrl] = useState<string>("");
  const [title, setTitle] = useState<string>("");
  const [timing, setTiming] = useState<string>("");
  const [ticketPrice, setTicketPrice] = useState<string>("");
  const [eventDescription, setEventDescription] = useState<string>("");
  const [type, setType] = useState<"conference" | "festival" | "playground">(
    "conference"
  );
  const [organizer, setOrganizer] = useState<string>("");
  const [tagLine, setTagLine] = useState<string>("");
  const [phoneNumber, setPhoneNumber] = useState<string>("");
  const [organizerDetails, setOrganizerDetails] = useState<string>("");
  const [videoUrl, setVideoUrl] = useState<string>("");
  const [email, setEmail] = useState<string>("");
  const [speaker, setSpeaker] = useState<string>("");
  const [latitude, setLatitude] = useState<string>("");
  const [longitude, setLongitude] = useState<string>("");
  const [addressLine1, setAddressLine1] = useState<string>("");
  const [addressLine2, setAddressLine2] = useState<string>("");
  const [city, setCity] = useState<string>("");
  const [state, setState] = useState<string>("");
  const [zipCOde, setZipCode] = useState<string>("");
  const [country, setCountry] = useState<string>("");

  const dispatch = useAppDispatch();
  const navigate = useNavigate();

  const status = useAppSelector((state) => state.event.addEventStatus);

  useEffect(() => {
    if (status == "success") {
      toast.success("Event added successfully!!");
      navigate("/event-list");
    }
    if (status == "failure")
      toast.error("Unable to create event. Please try after sometime");
  }, [status]);

  const handleSUbmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    dispatch(
      addEvent({
        imageUrl: imageUrl,
        title: title,
        phoneNumber: phoneNumber,
        email: email,
        eventDescription: eventDescription,
        latitude: latitude,
        longitude: longitude,
        organizer: organizer,
        organizerDetails: organizerDetails,
        place:
          addressLine1 +
          " " +
          addressLine2 +
          " " +
          city +
          " " +
          state +
          " " +
          zipCOde +
          " " +
          country,
        speaker: speaker,
        tagLine: tagLine,
        ticketCurrencySymbol: "USD",
        ticketPrice: Number(ticketPrice),
        timing: timing,
        type: type,
        videoUrl: videoUrl,
        id: new Date().getTime(),
      })
    );
  };

  return (
    <div className="max-w-5xl mx-auto border shadow rounded p-10 mt-10">
      <h1 className="text-2xl font-bold mb-4">Create Event</h1>
      <form onSubmit={handleSUbmit} className="space-y-4">
        <div className="grid md:grid-cols-2 grid-cols-1 gap-6">
          <div>
            <label
              htmlFor="event-name"
              className="block text-sm font-medium text-gray-700"
            >
              Event Name
            </label>
            <input
              type="text"
              id="event-name"
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              required
            />
          </div>

          <div>
            <label
              htmlFor="event-type"
              className="block text-sm font-medium text-gray-700"
            >
              Event Type
            </label>
            <select
              id="event-type"
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
              value={type}
              onChange={(e) =>
                setType(
                  e.target.value as "playground" | "conference" | "festival"
                )
              }
              required
            >
              <option value={"conference"}>Festival</option>
              <option value={"festival"}>Conference</option>
              <option value={"playground"}>Playground</option>
            </select>
          </div>
          <div>
            <label
              htmlFor="tagline"
              className="block text-sm font-medium text-gray-700"
            >
              Tagline
            </label>
            <input
              type="text"
              id="tagline"
              value={tagLine}
              onChange={(e) => setTagLine(e.target.value)}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
              required
            />
          </div>
          <div>
            <label
              htmlFor="email"
              className="block text-sm font-medium text-gray-700"
            >
              Email
            </label>
            <input
              type="email"
              id="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
              required
            />
          </div>
          <div>
            <label
              htmlFor="phone-number"
              className="block text-sm font-medium text-gray-700"
            >
              Phone Number
            </label>
            <input
              type="tel"
              id="phone-number"
              value={phoneNumber}
              onChange={(e) => setPhoneNumber(e.target.value)}
              pattern="[0-9]{10}"
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
              required
            />
          </div>
          <div>
            <label
              htmlFor="start-date-time"
              className="block text-sm font-medium text-gray-700"
            >
              Start Date & Time
            </label>
            <input
              type="datetime-local"
              min={new Date(new Date().getTime() + 86400000)
                .toLocaleString("sv")
                .replace(" ", "T")
                .slice(0, -3)}
              id="start-date-time"
              value={timing}
              onChange={(e) => setTiming(e.target.value)}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
              required
            />
          </div>

          <div>
            <label
              htmlFor="organizer"
              className="block text-sm font-medium text-gray-700"
            >
              Organizer
            </label>
            <input
              type="text"
              id="organizer"
              value={organizer}
              onChange={(e) => setOrganizer(e.target.value)}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
              required
            />
          </div>
          <div>
            <label
              htmlFor="organizer-details"
              className="block text-sm font-medium text-gray-700"
            >
              Organizer Details (Optional)
            </label>
            <input
              type="text"
              id="organizer-details"
              value={organizerDetails}
              onChange={(e) => setOrganizerDetails(e.target.value)}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
            />
          </div>

          <div>
            <label
              htmlFor="speaker"
              className="block text-sm font-medium text-gray-700"
            >
              Speaker
            </label>
            <input
              type="text"
              id="speaker"
              value={speaker}
              onChange={(e) => setSpeaker(e.target.value)}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
              required
            />
          </div>

          <div>
            <label
              htmlFor="video-url"
              className="block text-sm font-medium text-gray-700"
            >
              Video URL (Optional)
            </label>
            <input
              type="url"
              value={videoUrl}
              onChange={(e) => setVideoUrl(e.target.value)}
              id="video-url"
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
            />
          </div>

          <div>
            <label
              htmlFor="image-folder-path"
              className="block text-sm font-medium text-gray-700"
            >
              Image Url
            </label>
            <input
              type="url"
              id="image-folder-path"
              value={imageUrl}
              onChange={(e) => setImageUrl(e.target.value)}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
              required
            />
          </div>

          <div>
            <label
              htmlFor="ticket-price"
              className="block text-sm font-medium text-gray-700"
            >
              Ticket Price
            </label>
            <input
              type="number"
              id="ticket-price"
              value={ticketPrice}
              min={0}
              onChange={(e) => setTicketPrice(e.target.value)}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
              required
            />
          </div>

          <div>
            <label
              htmlFor="address1"
              className="block text-sm font-medium text-gray-700"
            >
              Address Line 1
            </label>
            <input
              type="text"
              id="address1"
              value={addressLine1}
              onChange={(e) => setAddressLine1(e.target.value)}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
              required
            />
          </div>
          <div>
            <label
              htmlFor="address2"
              className="block text-sm font-medium text-gray-700"
            >
              Address2 (Optional)
            </label>
            <input
              type="text"
              id="address2"
              value={addressLine2}
              onChange={(e) => setAddressLine2(e.target.value)}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
            />
          </div>
          <div>
            <label
              htmlFor="city"
              className="block text-sm font-medium text-gray-700"
            >
              City
            </label>
            <input
              type="text"
              id="city"
              value={city}
              onChange={(e) => setCity(e.target.value)}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
              required
            />
          </div>
          <div>
            <label
              htmlFor="state"
              className="block text-sm font-medium text-gray-700"
            >
              State
            </label>
            <input
              type="text"
              id="state"
              value={state}
              onChange={(e) => setState(e.target.value)}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
              required
            />
          </div>
          <div>
            <label
              htmlFor="zip-code"
              className="block text-sm font-medium text-gray-700"
            >
              Zip Code
            </label>
            <input
              type="text"
              id="zip-code"
              value={zipCOde}
              onChange={(e) => setZipCode(e.target.value)}
              pattern="[0-9]{6}"
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
              required
            />
          </div>
          <div>
            <label
              htmlFor="country"
              className="block text-sm font-medium text-gray-700"
            >
              Country
            </label>
            <input
              value={country}
              onChange={(e) => setCountry(e.target.value)}
              type="text"
              id="country"
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
              required
            />
          </div>
          <div>
            <label
              htmlFor="lat"
              className="block text-sm font-medium text-gray-700"
            >
              Latitude
            </label>
            <input
              type="text"
              id="lat"
              value={latitude}
              onChange={(e) => setLatitude(e.target.value)}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
              required
            />
          </div>

          <div>
            <label
              htmlFor="long"
              className="block text-sm font-medium text-gray-700"
            >
              Longitude
            </label>
            <input
              type="text"
              id="long"
              value={longitude}
              onChange={(e) => setLongitude(e.target.value)}
              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm p-2"
              required
            />
          </div>
        </div>

        <div>
          <label
            htmlFor="description"
            className="block text-sm font-medium text-gray-700"
          >
            Description
          </label>
          <ReactQuill
            className="mt-1  rounded-md shadow-sm"
            theme="snow"
            value={eventDescription}
            onChange={setEventDescription}
          />
        </div>

        <div>
          <button
            type="submit"
            className="mt-4 px-4 py-2 rounded text-white bg-slate-600 duration-200 text-center hover:bg-slate-800"
          >
            {status == "loading" ? <Loader /> : "Create Event"}
          </button>
        </div>
      </form>
    </div>
  );
}

================
File: src/components/pages/Events/EventList/__tests__/EventGridCard.spec.tsx
================
import { render, screen } from '@testing-library/react';
import { BrowserRouter } from 'react-router-dom';
import EventGridCard from '../EventGridCard';
import { Event } from '../../../../../interfaces/Event';
import getFormattedDate from '../../../../../utils/getFormattedDate';
// import trimString from '../../../../../utils/trimString';
// import { convert } from 'html-to-text';
 // Adjust the import path as necessary

const mockEvent: Event = {
    "id": 100,
    "imageUrl": "/images/events/5.png",
    "title": "in lacus curabitur at ipsum ac",
    "timing": "2022-06-14",
    "place": "0481 Pawling Lane",
    "ticketPrice": 155.25,
    "ticketCurrencySymbol": "CNY",
    "eventDescription": "Duis bibendum. Morbi non quam nec dui luctus rutrum. Nulla tellus.\n\nIn sagittis dui vel nisl. Duis ac nibh. Fusce lacus purus, aliquet at, feugiat non, pretium quis, lectus.",
    "type": "playground",
    "organizer": "Riffwire",
    "tagLine": "Assimilated intermediate Graphical User Interface",
    "phoneNumber": "468-262-5375",
    "email": "bbankhurst2r@4shared.com",
    "speaker": "Billy Bankhurst",
    "latitude": "29.39441",
    "longitude": "113.016085",
    "videoUrl": null,
    "organizerDetails":null
  };

describe('EventGridCard', () => {
  test('renders with event details', () => {
    render(
      <BrowserRouter>
        <EventGridCard event={mockEvent} />
      </BrowserRouter>
    );

    expect(screen.getByText(mockEvent.title)).toBeInTheDocument();
  });

  test('displays event image', () => {
    render(
      <BrowserRouter>
        <EventGridCard event={mockEvent} />
      </BrowserRouter>
    );

    const img = screen.getByAltText('Event Image');
    expect(img).toHaveAttribute('src', mockEvent.imageUrl);
  });

  test('displays formatted date', () => {
    render(
      <BrowserRouter>
        <EventGridCard event={mockEvent} />
      </BrowserRouter>
    );

    const formattedDate = getFormattedDate(mockEvent.timing);
    expect(screen.getByText(formattedDate)).toBeInTheDocument();
  });

  test('truncates event place correctly', () => {
    const longPlace = 'This is a very long place name that should be truncated';
    const eventWithLongPlace = { ...mockEvent, place: longPlace };

    render(
      <BrowserRouter>
        <EventGridCard event={eventWithLongPlace} />
      </BrowserRouter>
    );

    expect(screen.getByText(/Duis bibendum. Morbi/)).toBeInTheDocument();
  });

  test('displays ticket price', () => {
    render(
      <BrowserRouter>
        <EventGridCard event={mockEvent} />
      </BrowserRouter>
    );

    expect(screen.getByText(`Tickets from $${mockEvent.ticketPrice}`)).toBeInTheDocument();
  });


  test('link redirects to event details page', () => {
    render(
      <BrowserRouter>
        <EventGridCard event={mockEvent} />
      </BrowserRouter>
    );

    const link = screen.getByRole('link', { name: /tickets & details/i });
    expect(link).toHaveAttribute('href', `/event-details/${mockEvent.id}`);
  });
});

================
File: src/components/pages/Events/EventList/__tests__/EventListCard.spec.tsx
================
import { render, screen } from '@testing-library/react';
import { BrowserRouter } from 'react-router-dom';
// import { convert } from 'html-to-text';
import { Event } from '../../../../../interfaces/Event';
import EventListCard from '../EventListCard';

const mockEvent: Event = {
    "id": 100,
    "imageUrl": "/images/events/5.png",
    "title": "in lacus curabitur at ipsum ac",
    "timing": "2022-06-14",
    "place": "0481 Pawling Lane",
    "ticketPrice": 155.25,
    "ticketCurrencySymbol": "CNY",
    "eventDescription": "Duis bibendum. Morbi non quam nec dui luctus rutrum. Nulla tellus.\n\nIn sagittis dui vel nisl. Duis ac nibh. Fusce lacus purus, aliquet at, feugiat non, pretium quis, lectus.",
    "type": "playground",
    "organizer": "Riffwire",
    "tagLine": "Assimilated intermediate Graphical User Interface",
    "phoneNumber": "468-262-5375",
    "email": "bbankhurst2r@4shared.com",
    "speaker": "Billy Bankhurst",
    "latitude": "29.39441",
    "longitude": "113.016085",
    "videoUrl": null,
    "organizerDetails":null
  };

describe('EventListCard', () => {
  test('renders with event details', () => {
    render(
      <BrowserRouter>
        <EventListCard event={mockEvent} />
      </BrowserRouter>
    );

    expect(screen.getByText(mockEvent.title)).toBeInTheDocument();
  });

  test('displays event image', () => {
    render(
      <BrowserRouter>
        <EventListCard event={mockEvent} />
      </BrowserRouter>
    );

    const img = screen.getByAltText('Event Image');
    expect(img).toHaveAttribute('src', mockEvent.imageUrl);
  });

  test('displays event timing and place', () => {
    render(
      <BrowserRouter>
        <EventListCard event={mockEvent} />
      </BrowserRouter>
    );

    expect(screen.getByText(`${mockEvent.timing} on ${mockEvent.place}`)).toBeInTheDocument();
  });

  test('displays ticket price', () => {
    render(
      <BrowserRouter>
        <EventListCard event={mockEvent} />
      </BrowserRouter>
    );

    expect(screen.getByText(`Tickets from $${mockEvent.ticketPrice}`)).toBeInTheDocument();
  });

  

  test('link redirects to event details page', () => {
    render(
      <BrowserRouter>
        <EventListCard event={mockEvent} />
      </BrowserRouter>
    );

    const link = screen.getByRole('link', { name: /tickets & details/i });
    expect(link).toHaveAttribute('href', `/event-details/${mockEvent.id}`);
  });
});

================
File: src/components/pages/Events/EventList/EventGridCard.tsx
================
import { Link } from "react-router-dom";
import { Event } from "../../../../interfaces/Event";
import EventIcon from "@mui/icons-material/Event";
import getFormattedDate from "../../../../utils/getFormattedDate";
import { convert } from "html-to-text";
import trimString from "../../../../utils/trimString";
import LocationOnIcon from "@mui/icons-material/LocationOn";
export default function ({ event }: { event: Event }) {
  return (
    
    <div className="flex bg-white shadow rounded-lg h-56 p-3 space-x-4">
      
        <img
          className="object-cover rounded w-1/3 hidden lg:block"
          src={event.imageUrl}
          alt="Event Image"
        />
      
      <div className="lg:w-2/3 flex flex-col w-full">
        <h2 className="font-medium text-slate-700 capitalize">{trimString(event.title,16)}</h2>
        <div className="flex text-sm space-x-1 items-center mt-2">
          <EventIcon className="text-slate-500 !text-xl" />
          <p className="text-slate-500 text-sm">
            {" "}
            {getFormattedDate(event.timing)}
          </p>
        </div>
        <div className="flex space-x-1 items-center mt-1">
          <LocationOnIcon className="text-slate-500 !text-xl" />
          <p className="text-slate-500 text-sm">
            {" "}
            {event.place.length > 20
              ? event.place.substring(0, 25) + " ..."
              : event.place}
          </p>
        </div>
        <p className="text-slate-600 font-semibold mt-2 text-sm">
          Tickets from ${event.ticketPrice}
        </p>
        <p className="text-slate-500 text-xs mt-1">
          {trimString(convert(event.eventDescription), 50)}
        </p>
        <div className="flex-1"></div>
        <Link
          to={`/event-details/${event.id}`}
          className=" text-sm mt-4 px-4 py-2 border border-slate-400 text-slate-600 rounded hover:text-white hover:bg-slate-500 duration-200 text-center"
        >
          TICKETS & DETAILS
        </Link>
      </div>
    </div>
    // </div>
  );
}

================
File: src/components/pages/Events/EventList/EventListCard.tsx
================
import { Link } from "react-router-dom";
import { Event } from "../../../../interfaces/Event";
import EventIcon from "@mui/icons-material/Event";
import { convert } from "html-to-text";

export default function ({ event }: { event: Event }) {
  return (
    <div className="w-full bg-white shadow rounded-lg overflow-hidden flex">
      <div className="md:flex-[0.2] hidden md:block">
        <img
          className="w-full h-full object-cover"
          src={event.imageUrl}
          alt="Event Image"
        />
      </div>

      <div className="md:flex-[0.8] p-4 flex flex-col">
        <h2 className="text-xl font-bold text-slate-700">{event.title}</h2>

        <div className="flex space-x-1 items-center mt-3">
          <EventIcon className="text-slate-500" />
          <p className="text-slate-500 text-sm">
            {" "}
            {event.timing} on {event.place}
          </p>
        </div>

        <p className="text-slate-600 font-semibold mt-3">
          Tickets from ${event.ticketPrice}
        </p>
        <p className="text-slate-600 text-sm mt-3">{convert(event.eventDescription)}</p>

        <div className="flex-1"></div>

        <Link
          to={`/event-details/${event.id}`}
          className="mt-4 px-4 py-2 border border-slate-400 text-slate-600 rounded hover:text-white hover:bg-slate-500 duration-200 text-center"
        >
          TICKETS & DETAILS
        </Link>
      </div>
    </div>
  );
}

================
File: src/components/pages/Events/EventList/EventNav.tsx
================
import logo from "../../../../assets/main-logo.png";
import SearchIcon from "@mui/icons-material/Search";
import ArrowDownwardIcon from "@mui/icons-material/ArrowDownward";
import ViewListIcon from "@mui/icons-material/ViewList";
import GridViewIcon from "@mui/icons-material/GridView";
import { Dispatch, SetStateAction } from "react";

interface EventNavInput {
  viewType: "list" | "grid";
  setViewType: Dispatch<SetStateAction<"list" | "grid">>;
  searchText: string;
  setSearchText: Dispatch<SetStateAction<string>>;
  filterCategory: "all" | "conference" | "festival" | "playground";
  setFilterCategory: Dispatch<
    SetStateAction<"all" | "conference" | "festival" | "playground">
  >;
  sortBy: "" | "date" | "price"; 
  setSortBy: Dispatch<SetStateAction<"" | "date" | "price">>;
}

export default function ({
  viewType,
  setViewType,
  searchText,
  setSearchText,
  filterCategory,
  setFilterCategory,
  sortBy,
  setSortBy
}: EventNavInput) {
  return (
    <div className=" bg-white shadow hidden sm:block">
      <div className="mx-auto flex justify-between items-center p-4 max-w-5xl flex-col lg:flex-row space-y-4 lg:space-y-0">
        <div className="flex items-center">
          <div className="mr-4">
            <img src={logo} className="h-10 w-10" alt="Logo" />
          </div>

          <div className="flex space-x-6 text-gray-700 ml-3 *:border-gray-700 *:cursor-pointer">
            <a
              onClick={() => setFilterCategory("all")}
              className={
                "font-bold " + (filterCategory == "all" ? "border-b-2" : "")
              }
            >
              ALL
            </a>
            <a
              onClick={() => setFilterCategory("festival")}
              className={
                "font-bold " +
                (filterCategory == "festival" ? "border-b-2" : "")
              }
            >
              FESTIVAL
            </a>
            <a
              onClick={() => setFilterCategory("conference")}
              className={
                "font-bold " +
                (filterCategory == "conference" ? "border-b-2" : "")
              }
            >
              CONFERENCE
            </a>
            <a
              onClick={() => setFilterCategory("playground")}
              className={
                "font-bold " +
                (filterCategory == "playground" ? "border-b-2" : "")
              }
            >
              PLAYGROUND
            </a>
          </div>
        </div>

        <div className="flex">
          <div className="relative">
            <input
              value={searchText}
              onChange={(e) => setSearchText(e.target.value)}
              type="text"
              placeholder="Search events..."
              className="border rounded px-2 py-1"
            />
            <SearchIcon className="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-500" />
          </div>

          <div className="ml-4">
            <div className="border rounded px-2 py-1">
              <select aria-label="sort by dropdown" className="focus:outline-none px-2" name="cars" id="cars" value={sortBy} onChange={e => setSortBy(e.target.value as ("" | "date" | "price"))}>
                <option value="">
                 {sortBy == ""? "Sort By": "Clear Sort" }
                </option>
                <option value="date">Date</option>
                <option value="price">Price</option>
                
              </select>
              <ArrowDownwardIcon />
            </div>
          </div>

          <div className="flex space-x-2 ml-4 items-center">
            <button
              aria-label="list-view"
              onClick={() => setViewType("list")}
              className={
                "border rounded p-1 " +
                (viewType == "list" && "bg-gray-500 text-white")
              }
            >
              <ViewListIcon />
            </button>
            <button
              aria-label="grid-view"
              onClick={() => setViewType("grid")}
              className={
                "border rounded p-1 " +
                (viewType == "grid" && "bg-gray-500 text-white")
              }
            >
              <GridViewIcon />
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: src/components/pages/Events/EventList/EventsListPage.tsx
================
import { useEffect, useState } from "react";
import { useAppDispatch, useAppSelector } from "../../../../store/hooks";
import EventGridCard from "./EventGridCard";
// import db from "../../../../json-server/db.json";
import EventNav from "./EventNav";
import { fetchEvents } from "../../../../store/event";
import EventListCard from "./EventListCard";
import LoadingPage from "../../../ui/LoadingPage";
import { Navigate } from "react-router-dom";
export default function () {
  const [viewType, setViewType] = useState<"list" | "grid">("grid");
  const [searchText, setSearchText] = useState<string>("");
  const [filterCategory, setFilterCategory] = useState<
    "all" | "conference" | "festival" | "playground"
  >("all");

  const dispatch = useAppDispatch();

  const events = useAppSelector((state) => state.event.events);
  const eventFetchStatus = useAppSelector(state => state.event.status)

  const [sortBy,setSortBy] = useState<'date' | 'price' | "">("");



  useEffect(() => {
    if(eventFetchStatus != 'success' &&eventFetchStatus != 'loading')
    dispatch(fetchEvents());
  }, []);

  return (
    <>
    {eventFetchStatus == 'success' &&
    <>
      <EventNav
        sortBy={sortBy}
        setSortBy={setSortBy}
        viewType={viewType}
        setViewType={setViewType}
        searchText={searchText}
        setSearchText={setSearchText}
        filterCategory={filterCategory}
        setFilterCategory={setFilterCategory}
      />
      <div
        className={
          viewType == "list"
            ? "space-y-6 px-4 max-w-6xl mx-auto mt-10"
            : "grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-3 gap-5 px-4 max-w-6xl mx-auto mt-10"
        }
      >
        {events.toSorted((e1,e2) => {
         
          if(sortBy == "price") return e1.ticketPrice - e2.ticketPrice
          if(sortBy == "date") return (new Date(e1.timing)).getTime() -  (new Date(e2.timing)).getTime()
          return 0
        })
          .filter((event) => {
            return (
              event.title
                .toLowerCase()
                .includes(searchText.trim().toLowerCase()) ||
              event.eventDescription
                .toLowerCase()
                .includes(searchText.trim().toLowerCase()) ||
              event.place
                .toLowerCase()
                .includes(searchText.trim().toLowerCase())
            );
          })
          .filter((event) => {
            if(filterCategory == 'all') return true;
            return filterCategory == event.type
          })
          .map((event) =>
            viewType == "list" ? (
              <EventListCard key={event.id} event={event} />
            ) : (
              <EventGridCard key={event.id} event={event} />
            )
          )}
      </div>
    </>}
    {eventFetchStatus == 'loading' && <LoadingPage/>}
    {eventFetchStatus == 'failure' && <Navigate to="/error-page"/>}
    </>
  );
}

================
File: src/components/pages/GenericErrorPage.tsx
================
import { Link } from "react-router-dom";

export default function ({
  title,
  description,
}: {
  title: string | null;
  description: string | null;
}) {
  return (
    <div className="text-center mt-7 p-3">
      <h1 className="text-5xl sm:text-7xl text-slate-800">{title ? title : "OOPS!"}</h1>
      <p className="text-2xl text-slate-600 max-w-xl mx-auto mt-3">{description ? description : "Something went wrong"}</p>
      <Link
        className="inline-block mt-10 cursor-pointer py-2 px-4 bg-slate-700 hover:bg-slate-800 duration-300 text-slate-100 rounded-xl font-semibold"
        to="/"
      >
        Go back to home
      </Link>
    </div>
  );
}

================
File: src/components/pages/LoginPage.tsx
================
import { Link, useNavigate } from "react-router-dom";
import { useEffect, useRef, useState } from "react";
import { useAppDispatch, useAppSelector } from "../../store/hooks";
import { logIn } from "../../store/auth";
import Loader from "../ui/Loader";
import VisibilityIcon from "@mui/icons-material/Visibility";
import VisibilityOffIcon from '@mui/icons-material/VisibilityOff';

export default function () {
  const navigate = useNavigate();
  const dispatch = useAppDispatch();

  const authStatus = useAppSelector((state) => state.auth.status);

  const [userName, setUserName] = useState<string>("");
  const [password, setPassword] = useState<string>("");
  const [errorMessage, setErrorMessage] = useState<string>("");
  const [isPasswordVisible, setIsPasswordVisible] = useState<boolean>(false);

  const formRef = useRef<HTMLFormElement>(null);


  useEffect(() => {
    if (authStatus === "success") {
      navigate("/event-list");
    } else if (authStatus == "failure")
      setErrorMessage("Invalid username or password");
  }, [authStatus]);

  const handleSUbmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    dispatch(
      logIn({
        username: userName,
        password: password,
      })
    );
  };

  return (
    <>
      <div className="bg-slate-100 min-h-screen sm:pt-36 pt-10 px-2">
        <div className="bg-white rounded-lg border border-slate-300 p-6 max-w-lg mx-auto ">
          <h1 className="text-center text-2xl text-slate-800">Login</h1>
          <p className="text-center text-slate-500 mt-3">
            Welcome to Community Event Platform
          </p>
          <form
            ref={formRef}
            onFocus={() => setErrorMessage("")}
            onSubmit={handleSUbmit}
            className="mt-6 flex flex-col"
          >
            <input
              className="border-[0.1rem] border-slate-800 py-1 px-2 rounded-md"
              value={userName}
              onChange={(e) => setUserName(e.target.value)}
              type="text"
              placeholder="Username"
            required/>
            <div className="relative mt-3">
              <input
                className="border-[0.1rem] border-slate-800 py-1 px-2 rounded-md w-full"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                type={isPasswordVisible ? "text" : "password"}
                placeholder="Password"
              required/>
              <button
              type="button"
              onClick={() => setIsPasswordVisible((p) => !p)}
              className="absolute right-3 top-1/2 -translate-y-1/2 text-slate-600">
                {isPasswordVisible ? <VisibilityOffIcon/> : <VisibilityIcon />}
              </button>
            </div>

            {errorMessage && (
              <p className="mt-3 rounded-md px-2 py-1 bg-red-100 text-red-900">
                {errorMessage}
              </p>
            )}
            <button
              className="mt-6 bg-slate-800 text-white text-sm py-2 px-2 rounded-md hover:bg-slate-950 duration-200 flex justify-center disabled:cursor-not-allowed disabled:opacity-70"
              type="submit"
              disabled={!formRef.current?.checkValidity()}
            >
              {authStatus == "loading" ? <Loader /> : "Login"}
            </button>
          </form>
          <div className="flex justify-center space-x-2 mt-6">
            <p className="text-slate-500">Don't have an account?</p>
            <Link
              className="underline hover:text-slate-500 duration-300"
              to={"/signup"}
            >
              Sign Up
            </Link>
          </div>
        </div>
      </div>
    </>
  );
}

================
File: src/components/pages/SignUpPage.tsx
================
import { useRef, useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import ArrowForwardIcon from "@mui/icons-material/ArrowForward";
import axios from "axios";
import { toast } from "react-toastify";
import Loader from "../ui/Loader";

export default () => {
  const [firstName, setFirstName] = useState<string>("");
  const [lastName, setLastName] = useState<string>("");
  const [emailId, setEmailId] = useState<string>("");
  const [userName, setUserName] = useState<string>("");
  const [phoneNumber, setPhoneNumber] = useState<string>("");
  const [password, SetPassword] = useState<string>("");
  const [address, setAddress] = useState<string>("");

  const form1Ref = useRef<HTMLFormElement>(null);
  const form2Ref = useRef<HTMLFormElement>(null);

  const [status,setStatus] = useState<string>("pending")

  const [selectedForm, setSelectedForm] = useState<"form1" | "form2">("form1");

  const navigate = useNavigate();

  const handleForm1Submit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setSelectedForm("form2");
  };

  const handleForm2Submit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setStatus("loading");
    axios
      .post("https://fakestoreapi.com/users", {
        email: emailId,
        username: userName,
        password: password,
        name: {
          firstname: firstName,
          lastname: lastName,
        },
        address: address,
        phone: phoneNumber,
      })
      .then((_res) => {
        localStorage.clear()
        toast.success("Successfully signed up!");
        setStatus("success")
        navigate("/login");
      })
      .catch((_err) => {
        toast.error("Unable to signup please try after sometime");
        setStatus("failure")
        setSelectedForm("form1");
      });
  };

  return (
    <>
      <div className="bg-slate-100 min-h-screen sm:pt-36 pt-10 px-2">
        <div className="bg-white rounded-lg border border-slate-300 p-6 max-w-lg mx-auto">
          <h1 className="text-center text-2xl text-slate-800">Sign Up</h1>
          <p className="text-center text-slate-500 mt-3">
            Welcome to Community Event Platform
          </p>
          {selectedForm == "form1" && (
            <form
              ref={form1Ref}
              onSubmit={handleForm1Submit}
              className="mt-6 flex flex-col"
            >
              <div className="flex flex-col space-y-3">
                <input
                  className="border-[0.1rem] border-slate-800 py-1 px-2 rounded-md flex-1"
                  type="email"
                  onBlur={(e) => {
                    if(!e.target.checkValidity()) toast.warn("Please provide a valid email")
                  }}
                  value={emailId}
                  onChange={(e) => setEmailId(e.target.value)}
                  placeholder="Email Id"
                  required
                />
                <input
                  className="border-[0.1rem] border-slate-800 py-1 px-2 rounded-md flex-1"
                  type="password"
                  value={password}
                  onChange={(e) => SetPassword(e.target.value)}
                  placeholder="Password"
                  required
                />

                <input
                  className="border-[0.1rem] border-slate-800 py-1 px-2 rounded-md flex-1"
                  type="text"
                  value={userName}
                  onChange={(e) => setUserName(e.target.value)}
                  placeholder="Username"
                  required
                />
              </div>

              <button
                className="mt-6 bg-slate-800 text-white text-sm py-2 px-2 rounded-md hover:bg-slate-950 duration-200 space-x-1 flex items-center justify-center disabled:cursor-not-allowed disabled:opacity-60"
                type="submit"
                disabled={!form1Ref.current?.checkValidity()}
              >
                <span>Next</span>
                <ArrowForwardIcon />
              </button>
            </form>
          )}

          {selectedForm == "form2" && (
            <form
              ref={form2Ref}
              onSubmit={handleForm2Submit}
              className="mt-6 flex flex-col"
            >
              <div className="flex flex-col space-y-3">
                <input
                  className="border-[0.1rem] border-slate-800 py-1 px-2 rounded-md flex-1"
                  type="text"
                  value={firstName}
                  onChange={(e) => setFirstName(e.target.value)}
                  placeholder="First Name"
                  required
                />
                <input
                  className="border-[0.1rem] border-slate-800 py-1 px-2 rounded-md flex-1"
                  type="text"
                  value={lastName}
                  onChange={(e) => setLastName(e.target.value)}
                  placeholder="Last Name"
                  required
                />

                <input
                  className="border-[0.1rem] border-slate-800 py-1 px-2 rounded-md flex-1"
                  type="tel"
                  value={phoneNumber}
                  pattern="[0-9]{10}"
                  onChange={(e) => setPhoneNumber(e.target.value)}
                  onBlur={(e)=> {
                    if(!e.target.checkValidity()) toast.warn("Please provide a valid phone number")
                  }}
                  placeholder="Phone Number"
                  required
                />

                <input
                  className="border-[0.1rem] border-slate-800 py-1 px-2 rounded-md flex-1"
                  type="text"
                  value={address}
                  onChange={(e) => setAddress(e.target.value)}
                  placeholder="Address"
                  required
                />
              </div>

              <button
                className="mt-6 bg-slate-800 text-white text-sm py-2 px-2 rounded-md hover:bg-slate-950 duration-200 space-x-1 disabled:cursor-not-allowed disabled:opacity-60"
                type="submit"
                disabled={!form2Ref.current?.checkValidity()}
              >
                {status == 'loading' ? <Loader/> : <span>Sign Up</span> }
                
              </button>
            </form>
          )}

          <div className="flex justify-center space-x-2 mt-6">
            <p className="text-slate-500">Already have an account?</p>
            <Link
              className="underline hover:text-slate-500 duration-300"
              to={"/login"}
            >
              Login
            </Link>
          </div>
        </div>
      </div>
    </>
  );
};

================
File: src/components/ui/Loader.tsx
================
import AutorenewIcon from "@mui/icons-material/Autorenew";
export default function (props:any) {
  return (
    <>
      <AutorenewIcon {...props}  className={"animate-spin " + (props.className ? props.className : "")} />
    </>
  );
}

================
File: src/components/ui/LoadingPage.tsx
================
import Loader from "./Loader";

export default function(){
    return (
        <div className=" mt-36 w-full flex items-center justify-center text-slate-600">
            <Loader className="!text-5xl" />
        </div>
    )
}

================
File: src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

select{
    -moz-appearance: none;
  /* for Chrome */
  -webkit-appearance: none;
}

select::-ms-expand {
    display: none;
  }

  .no-scrollbar::-webkit-scrollbar {
    display: none;
}

================
File: src/interfaces/Event.ts
================
export interface Event {
    id:number,
    imageUrl:string,
    title:string,
    timing:string,
    place:string
    ticketPrice:number,
    ticketCurrencySymbol:string,
    eventDescription:string,
    type: "conference" | "festival" | "playground",
    organizer:string


    tagLine:string
    phoneNumber:string
    organizerDetails: string | null
    videoUrl:string | null
    email:string
    speaker:string
    latitude:string
    longitude:string
}

================
File: src/main.tsx
================
import { StrictMode } from "react";
import { createRoot } from "react-dom/client";
import "./index.css";
import App from "./App.tsx";
import { Provider } from "react-redux";
import { PersistGate } from "redux-persist/integration/react";
import { BrowserRouter } from "react-router-dom";
import store, { persistor } from "./store/index.ts";
import { ToastContainer, toast } from 'react-toastify';
  import 'react-toastify/dist/ReactToastify.css';

createRoot(document.getElementById("root")!).render(
  <StrictMode>
    <Provider store={store}>
      <PersistGate loading={null} persistor={persistor}>
        <BrowserRouter>
          <App />
          <ToastContainer/>
        </BrowserRouter>
      </PersistGate>
    </Provider>
  </StrictMode>
);

================
File: src/store/analysis.ts
================
import { createSlice } from "@reduxjs/toolkit";
import axios from "axios";
// import persistReducer from "redux-persist/es/persistReducer";
// import storage from "redux-persist/lib/storage"; // defaults to localStorage for web

export type EventAnalysisStatus =
  | "pending"
  | "success"
  | "failure"
  | "loading";

interface EventAnalysisState {
  summary: {
    upcoming: number;
    total: number;
    completed: number;
    myEvents: number;
  } | null;
  barChart: {
    Jan: number;
    Feb: number;
    Mar: number;
    Apr: number;
    May: number;
    Jun: number;
    Jul: number;
    Aug: number;
    Sep: number;
    Oct: number;
    Nov: number;
    Dec: number;
  } | null;

  status: EventAnalysisStatus
}
const initialState: EventAnalysisState = {
    summary: null,
    barChart: null,
    status:'pending'
};

const eventAnalysisSlice = createSlice({
  initialState: initialState,
  name: "eventAnalysisSlice",
  reducers: {
    setState: (
      state: EventAnalysisState,
      action: {
        payload: EventAnalysisState;
        type: string;
      }
    ) => {
      state.summary = action.payload.summary;
      state.barChart = action.payload.barChart;
    },

    setStatus: (
        state: EventAnalysisState,
        action: {
          payload: EventAnalysisStatus;
          type: string;
        }
      ) => {
        state.status = action.payload  
    }
    
  },
});

export const eventAnalysisActions = eventAnalysisSlice.actions;

export default eventAnalysisSlice.reducer;



export const fetchEventAnalysis = () => {
  return async (dispatch: any) => {
    dispatch(eventAnalysisActions.setStatus("loading"));

    axios
      .get("http://localhost:5000/event-analysis")
      .then((res) => {
          dispatch(eventAnalysisActions.setState(res.data))
        dispatch(eventAnalysisActions.setStatus("success"));

      })
      .catch((_err) => {
        dispatch(eventAnalysisActions.setStatus("failure"));
      });
  };
};

================
File: src/store/auth.ts
================
import { createSlice } from "@reduxjs/toolkit";
import axios from "axios";
import persistReducer from "redux-persist/es/persistReducer";
import storage from "redux-persist/lib/storage"; // defaults to localStorage for web

type authStatus = "pending" | "success" | "failure" | "loading"

interface AuthState {
  token: string | null;
  status: authStatus;
}
const initialState: AuthState = {
  token: null,
  status: "pending",
};

const authSlice = createSlice({
  initialState: initialState,
  name: "authentication",
  reducers: {
    setToken: (
      state: AuthState,
      action: {
        payload: string;
        type: string;
      }
    ) => {
      const userData = action.payload;
      state.token = userData;
    },

    setStatus: (
      state: AuthState,
      action: {
        payload: authStatus;
        type: string;
      }
    ) => {
      state.status = action.payload;
    },
  },
});

const persistConfig = {
  key: "root",
  storage,
};

export const authActions = authSlice.actions;

export default persistReducer(persistConfig, authSlice.reducer);

export interface AuthInfo {
  username: string;
  password: string;
}

export const logIn = (authInfo: AuthInfo) => {
  return async (dispatch: any) => {
    dispatch(authActions.setStatus('loading'));
    
    axios.post(
        "https://fakestoreapi.com/auth/login",
        authInfo
    )
    .then((res) => {
        const token = res.data.token;
        dispatch(authActions.setToken(token));
        dispatch(authActions.setStatus("success"));
    })
    .catch((_err)=> {
        dispatch(authActions.setStatus("failure"));
    })

  };
};

================
File: src/store/event-registration.ts
================
import { createSlice } from "@reduxjs/toolkit";
import axios from "axios";
// import persistReducer from "redux-persist/es/persistReducer";
// import storage from "redux-persist/lib/storage"; // defaults to localStorage for web

export type EventRegistrationStatus = "pending" | "success" | "failure" | "loading";

interface EventRegistrationState {
  eventIds: string[];
  status: EventRegistrationStatus;
}
const initialState: EventRegistrationState = {
  eventIds: [],
  status: "pending",
};

const eventRegistrationSlice = createSlice({
  initialState: initialState,
  name: "eventRegistration",
  reducers: {
    setEventIds: (
      state: EventRegistrationState,
      action: {
        payload: string[];
        type: string;
      }
    ) => {
      state.eventIds = action.payload;
    },
    addEventRegistration( state: EventRegistrationState,
      action: {
        payload:string;
        type: string;
      }){
        state.eventIds.push(action.payload)
      },

    setStatus: (
      state: EventRegistrationState,
      action: {
        payload: EventRegistrationStatus;
        type: string;
      }
    ) => {
      state.status = action.payload;
    },
  },
});

export const eventRegistrationActions = eventRegistrationSlice.actions;

export default eventRegistrationSlice.reducer;

export const fetchEventRegistrations = () => {
  return async (dispatch: any) => {
    dispatch(eventRegistrationActions.setStatus("loading"));

    axios
      .get("http://localhost:5000/events-registrations")
      .then((res) => {
        const eventIds: string[] = res.data.map((e: { id: string }) => e.id);
        dispatch(eventRegistrationActions.setEventIds(eventIds));
        dispatch(eventRegistrationActions.setStatus("success"));

      })
      .catch((_err) => {
        dispatch(eventRegistrationActions.setStatus("failure"));
      });
  };
};

export const registerForEvent = (eventId:string) => {
  return async (dispatch: any) => {
    dispatch(eventRegistrationActions.setStatus("loading"));

    axios
      .post("http://localhost:5000/events-registrations",{
        id:eventId
      })
      .then((res) => {
         const event:{id:string} = res.data;

         dispatch(eventRegistrationActions.addEventRegistration(event.id))
        dispatch(eventRegistrationActions.setStatus("success"));

        
      })
      .catch((_err) => {
        dispatch(eventRegistrationActions.setStatus("failure"));
      });
  };
};

================
File: src/store/event.ts
================
import { createSlice } from "@reduxjs/toolkit";
import axios from "axios";
// import persistReducer from "redux-persist/es/persistReducer";
// import storage from "redux-persist/lib/storage"; // defaults to localStorage for web
import { Event } from "../interfaces/Event";

type eventStatus = "pending" | "success" | "failure" | "loading";

interface EventState {
  events: Event[];
  status: eventStatus;
  addEventStatus: eventStatus;
}
const initialState: EventState = {
  events: [],
  status: "pending",
  addEventStatus: "pending",
};

const eventSlice = createSlice({
  initialState: initialState,
  name: "events",
  reducers: {
    setEvents: (
      state: EventState,
      action: {
        payload: Event[];
        type: string;
      }
    ) => {
      state.events = action.payload;
    },
    addEvent: (
      state: EventState,
      action: {
        payload: Event;
        type: string;
      }
    ) => {
      state.events.push(action.payload);
    },

    setStatus: (
      state: EventState,
      action: {
        payload: eventStatus;
        type: string;
      }
    ) => {
      state.status = action.payload;
    },

    setAddAddEventStatus: (
      state: EventState,
      action: {
        payload: eventStatus;
        type: string;
      }
    ) => {
      state.addEventStatus = action.payload;
    },
  },
});

// const persistConfig = {
//   key: "root",
//   storage,
// };

export const eventActions = eventSlice.actions;

// export default persistReducer(persistConfig, eventSlice.reducer);
export default eventSlice.reducer;

export interface AuthInfo {
  username: string;
  password: string;
}

export const fetchEvents = () => {
  return async (dispatch: any) => {
    dispatch(eventActions.setStatus("loading"));

    axios
      .get("http://localhost:5000/events")
      .then((res) => {
        dispatch(eventActions.setEvents(res.data));
        dispatch(eventActions.setStatus("success"));
      })
      .catch((_err) => {
        dispatch(eventActions.setStatus("failure"));
      });
  };
};

export const addEvent = (event: Event) => {
  return async (dispatch: any) => {
    dispatch(eventActions.setAddAddEventStatus("loading"));

    axios
      .post("http://localhost:5000/events", { ...event, id: String(event.id) })
      .then((res) => {
        dispatch(eventActions.addEvent(res.data));
        dispatch(eventActions.setAddAddEventStatus("success"));
      })
      .catch((_err) => {
        dispatch(eventActions.setAddAddEventStatus("failure"));
      });
  };
};

================
File: src/store/hooks.ts
================
import { useDispatch, useSelector } from "react-redux";
import store, { RootState } from ".";

export const useAppDispatch = useDispatch.withTypes<(typeof store.dispatch)>();
export const useAppSelector = useSelector.withTypes<RootState>()

================
File: src/store/index.ts
================
import {  persistStore } from 'redux-persist';
import authSlice from "./auth";
import eventSlice from "./event"
import eventRegistrationSlice from './event-registration'
import analysisSlice from './analysis' 
import { configureStore } from '@reduxjs/toolkit';

const store = configureStore({
  reducer: {
    auth: authSlice,
    event:eventSlice,
    eventRegistrations:eventRegistrationSlice,
    eventAnalysis: analysisSlice
  },
  middleware: (getDefaultMiddleware) => getDefaultMiddleware({
    serializableCheck:false
  }),
});

export type RootState = ReturnType<typeof store.getState>

export const persistor = persistStore(store);


export default store

================
File: src/utils/getFormattedDate.ts
================
var options:any = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
export default function(dateString:string){
    const date = new Date(dateString)
    return date.toLocaleDateString("en-US", options)
}

================
File: src/utils/getFormattedTime.ts
================
var options:Intl.DateTimeFormatOptions = { hour:'2-digit',minute:'2-digit',hour12:true };
export default function(dateString:string){
    const date = new Date(dateString)
    return date.toLocaleTimeString("en-US", options)
}

================
File: src/utils/isDateInFuture.ts
================
export default function(dateString:string):boolean{
    const date = new Date(dateString)
    const today = new Date()

    return today.getTime() < date.getTime()
}

================
File: src/utils/trimString.ts
================
export default function(text:string,maxChars:number){
    return text.length > maxChars ? text.substring(0,maxChars) + " ..." : text
}

================
File: src/vite-env.d.ts
================
/// <reference types="vite/client" />

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

================
File: tsconfig.app.json
================
{
  
  "compilerOptions": {
    "esModuleInterop":true,
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2023", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "Bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}

================
File: tsconfig.json
================
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}

================
File: tsconfig.node.json
================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023","ES2023.Array"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "Bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}
